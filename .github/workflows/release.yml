name: 📦 Nuget package publish

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform a dry run (pack only, no push or release)'
        required: false
        default: true
        type: boolean

env:
   NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}

jobs:

  nuget:
    name: 📦 Nuget - Publish package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      packages: write
    steps:
      # 🛒 Checkout the repository
      - name: 🛒 Checkout
        uses: actions/checkout@v4

      # 🟣 Setup .NET
      - name: 🟣 Setup .NET 9.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      # 🔍 Extract Version from Directory.Build.props
      - name: 🔍 Extract Version
        id: extract_version
        run: |
          # Extract AssemblyVersion
          assemblyVersion=$(grep -oP '(?<=<AssemblyVersion>).*?(?=</AssemblyVersion>)' Directory.Build.props)

          # Extract Version
          version=$(grep -oP '(?<=<Version>).*?(?=</Version>)' Directory.Build.props)

          # Replace $(AssemblyVersion) in version with the value of assemblyVersion
          version=$(echo "$version" | sed "s/\$(AssemblyVersion)/$assemblyVersion/g")

          # Ensure version is valid
          if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "::error::Invalid version format in Directory.Build.props: $VERSION"
            exit 1
          fi

          echo "Version=$version" >> $GITHUB_ENV
          echo "Extracted and Resolved AssemblyVersion: $assemblyVersion"
          echo "Extracted and Resolved Version: $version"

      # 📝 Parse changelog for the version
      - name: 📝 Parse changelog
        id: parse_changelog
        run: |
          version=${{ env.Version }}


          # Match both formats: "# 1.1.0" and "# v1.1.0"
          CHANGELOG_CONTENT=$(awk -v version="$version" '
            BEGIN { print=0 }
            /^# (v)?'"${version}"' / {
              print=1; next
            }
            /^# (v)?[0-9]+\.[0-9]+\.[0-9]+ / {
              if (print) exit
            }
            print { print }
          ' CHANGELOG.md)

          # Escape for GitHub output
          CHANGELOG_CONTENT="${CHANGELOG_CONTENT//'%'/'%25'}"
          CHANGELOG_CONTENT="${CHANGELOG_CONTENT//$'\n'/'%0A'}"
          CHANGELOG_CONTENT="${CHANGELOG_CONTENT//$'\r'/'%0D'}"

          echo "changelog=${CHANGELOG_CONTENT}" >> $GITHUB_ENV

          if [ -z "$changelog" ]; then
            echo "::error::No changelog found for version $version"
            exit 1
          fi

          echo "Parsed changelog for version $version"
          echo "$changelog"

      # 📦 Pack the project
      - name: 📦 Pack
        run: |
          dotnet pack Updatum --configuration Release --output .

      # 🏷️ Create a Git tag
      - name: 🏷️ Create Git tag
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ env.Version }}" -m "Release v${{ env.Version }}"
          git push origin "v${{ env.Version }}"

      # 🚀 Push to nuget.org
      - name: 🚀 Push nuget.org
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json --api-key ${NUGET_TOKEN} --skip-duplicate

      # 🚀 Push to GitHub Packages
      - name: 🚀 Push Github
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: dotnet nuget push *.nupkg --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --api-key ${{ github.token }} --skip-duplicate

      # 📝 Create GitHub release
      - name: 📝 Create GitHub release
        if: ${{ github.event.inputs.dry_run != 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.Version }}"
          name: "v${{ env.Version }}"
          body: ${{ env.Changelog }}
          draft: false
          prerelease: ${{ contains(env.Version, '-alpha') || contains(env.Version, '-beta') || contains(env.Version, '-preview') || contains(env.Version, '-rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Show dry run message if enabled
      - name: 🛑 Dry run notice
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: echo "Dry run completed. Package was built but not published."